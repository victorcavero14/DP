1. ASI NO

    a) Ord t => t -> t -> t
    b) Num t1 => (t1 -> t) -> t1 -> t
    c) Num a => (t -> a) -> t -> a
    d) ((t2 -> t1) -> t1 -> t) -> (t2 -> t1) -> t2 -> t

1.

    d) 

        f4 :: t1 -> t2 -> t3 -> t4

        f4 x y z = x y (y z)

        x t1
        y t2
        z t3

        x y(y z):: t =>  x:: t' -> t'' -> t => t2 = t'
                        y:: t'                y:: t'' => t'' => t3 = t'''
                        yz:: t''              z::t''' 

        t1 = (t3 -> t'') -> t'' -> t 
            a     b       b      c

        f:: ((a -> b) -> b -> c) -> (a->b) -> a -> c

2.
    b)
        --Hay una funcion predefinida que te lo hace (gcd)

        mcd :: Integral a => a -> a -> a
        mcd a 0 = a
        mcd a b = mcd b (rem a b)

    a)
        simplifica:: (a,a) -> (a,a)
        simplifica (a,b) = (x,y)
            where x = div a p
                  y = div b p
                  p = mcd a b

    c) 
        mcm :: Integral a => a -> a -> a
        mcm a b = div (a*b) (mcd a b)

    d) 
        sumarac (a,b) (c,d) = simplifica (a*d + b*c, b*d)
        sumarac (a,b) (c,d) = simplifica (a*d - b*c, b*d)
        sumarac (a,b) (c,d) = simplifica(a*c, b*d)
        sumarac (a,b) (c,d) = simplifica(a*d, b*c)
        sumarac (a,b) (c,d) = 

3.
    a) (\x y -> y x) 2

    b) (\x y -> y x) 2 (\x -> x + 1) =
       (\y -> y 2) (\x -> x + 1) =
        (\x -> x + 1) 2 = 2 + 1 = 3

    c)(\x ->\y -> x y) (\z -> z + 1) 2
    
    d)(\x ->\y -> y/x) 2 = (\y -> y/2)
      Fractional a => a -> a
    
    e)(\x y -> y * x) 2 (\x -> x + 1)
        ERROR DE TIPOS

    f)(\x y z -> y x (z x)) 2 (\x y -> y * x)
      1. (\yz -> yz (zx)) (\xy -> y * x)
      2. \z -> (\y -> y*2)(z2) = \z -> (z2)*2
    
    g)(\x y z -> y x (z x)) 2 (\x y -> y * x) (\x -> x + 1)
        1. (\yz -> y2 (z2)) (\xy -> y * x) (\x -> x + 1)
        2. (\z -> (\xy -> y*x) 2 (z2)) (\x -> x + 1)
        3. (\xy -> y*x) 2 ((\x -> x + 1)2)
        4. (\y -> y*2) ((\x -> x+1)2)
        5. ((\x -> x + 1) 2 ) * 2
        6. (2 + 1) * 2
        7. 6

    h)let y = (\x -> x + 1) in y 2
    
    i)(\x -> x + 1) (let y =\x -> x + 1 in y 2)

4. 
    b) 
        y/x => y:: t' sea t' Fractional
               x:: t'

        f x y = \z -> y/x - z
        fi:: Fractional a => a -> a -> (a -> a)

        f:: t1 -> t2 -> t
        x:: t1
        y:: t2

        \z -> y/x - z :: t
        t = t3 -> t1 = t1 -> t1
        z :: t3        t1 = t2

    c) \z w -> w (y/x - z)

        :: Fractional a => a -> (a -> b) -> b

        f' x y = \z w -> w (y/x - z)

        :: Fractional a => a -> a -> a -> (a -> b) -> b

    5.

        a) zip3 :: [a] ->[b] ->[c] ->[(a,b,c)]
           zip3 xs ys zs = 
            map f zip xs (zip ys zs)
                where f = \(x, (y,z)) -> (x,y,z)

        b) impares xs = filter odd xs
          o también así: impares = filter odd

        c) Escalar:: Num a => [a] -> [a] -> a 
           Escalar xs ys = sum (zipWith (*) xs ys)
        
        d) mcdList [] = 0
           mcdList (x:xs) = foldr gcd x xs